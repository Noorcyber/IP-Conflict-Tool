#!/bin/bash

# Display banner
display_datto_netrunners() {
    cat << "EOF"

██╗██████╗ ██████╗ ███████╗ ██████╗ ██████╗ ███╗   ██╗
██║██╔══██╗██╔══██╗██╔════╝██╔════╝██╔═══██╗████╗  ██║
██║██████╔╝██████╔╝█████╗  ██║     ██║   ██║██╔██╗ ██║
██║██╔═══╝ ██╔══██╗██╔══╝  ██║     ██║   ██║██║╚██╗██║
██║██║     ██║  ██║███████╗╚██████╗╚██████╔╝██║ ╚████║
╚═╝╚═╝     ╚═╝  ╚═╝╚══════╝ ╚═════╝ ╚══════╝ ╚═╝  ╚═══╝

  By Noor Shaheed, Datto, Kaseya. 05/27/2024 IP Conflict Tool V.01
EOF
}

display_datto_netrunners

echo -e "\nFetching ARP table using 'ip neigh'...\n"

# Collect ARP output line-by-line safely
arp_lines=()
while IFS= read -r line; do
    arp_lines+=("$line")
done < <(ip neigh)

echo "ARP Table:"
echo "-------------------------------------------------------------"
printf "%-16s %-10s %-20s %-10s\n" "IP Address" "Interface" "MAC Address" "Status"
echo "-------------------------------------------------------------"

# Print formatted ARP table
for line in "${arp_lines[@]}"; do
    ip_addr=$(echo "$line" | awk '{print $1}')
    iface=$(echo "$line" | awk '{print $3}')
    mac=$(echo "$line" | awk '{for(i=1;i<=NF;i++) if ($i=="lladdr") print $(i+1)}')
    status=$(echo "$line" | awk '{print $NF}')
    [[ -z "$mac" ]] && mac="N/A"
    printf "%-16s %-10s %-20s %-10s\n" "$ip_addr" "$iface" "$mac" "$status"
done

echo -e "\nAnalyzing ARP table for IP conflicts..."

# Extract all MAC addresses and find duplicates
macs=()
for line in "${arp_lines[@]}"; do
    mac=$(echo "$line" | awk '{for(i=1;i<=NF;i++) if ($i=="lladdr") print $(i+1)}')
    [[ -n "$mac" ]] && macs+=("$mac")
done

# Detect duplicates
conflicts=$(printf "%s\n" "${macs[@]}" | sort | uniq -d)

if [[ -z "$conflicts" ]]; then
    echo "✅ No IP conflicts detected."
else
    echo -e "\n⚠️ IP conflicts detected:\n"
    for mac in $conflicts; do
        echo "MAC Address: $mac"
        echo "------------------------"
        for entry in "${arp_lines[@]}"; do
            echo "$entry" | grep -q "$mac" || continue
            ip_addr=$(echo "$entry" | awk '{print $1}')
            iface=$(echo "$entry" | awk '{print $3}')
            status=$(echo "$entry" | awk '{print $NF}')
            printf "  %-16s %-10s %-10s\n" "$ip_addr" "$iface" "$status"
        done
        echo
    done
fi
