#!/bin/bash

display_datto_netrunners() {
    cat << "EOF"

██╗██████╗ ██████╗ ███████╗ ██████╗ ██████╗ ███╗   ██╗
██║██╔══██╗██╔══██╗██╔════╝██╔════╝██╔═══██╗████╗  ██║
██║██████╔╝██████╔╝█████╗  ██║     ██║   ██║██╔██╗ ██║
██║██╔═══╝ ██╔══██╗██╔══╝  ██║     ██║   ██║██║╚██╗██║
██║██║     ██║  ██║███████╗╚██████╗╚██████╔╝██║ ╚████║
╚═╝╚═╝     ╚═╝  ╚═╝╚══════╝ ╚═════╝ ╚══════╝ ╚═╝  ╚═══╝

  By Noor Shaheed, Datto, Kaseya. 05/27/2024 IP Conflict Tool V.01
EOF
}

display_datto_netrunners

echo -e "\nFetching ARP table using 'ip neigh'...\n"

arp_output=$(ip neigh)

echo "ARP Table:"
echo "-------------------------------------------------------------"
printf "%-16s %-10s %-20s %-10s\n" "IP Address" "Interface" "MAC Address" "Status"
echo "-------------------------------------------------------------"

# Format and print arp_output nicely
while read -r line; do
    # Parse the fields from ip neigh output
    # Format varies: sometimes no MAC, sometimes no status
    ip_addr=$(echo "$line" | awk '{print $1}')
    iface=$(echo "$line" | awk '{print $3}')
    mac=$(echo "$line" | awk '{for(i=1;i<=NF;i++) if ($i=="lladdr") print $(i+1)}')
    status=$(echo "$line" | awk '{print $NF}')
    # If mac is empty, put N/A
    [[ -z "$mac" ]] && mac="N/A"
    printf "%-16s %-10s %-20s %-10s\n" "$ip_addr" "$iface" "$mac" "$status"
done <<< "$arp_output"

echo -e "\nAnalyzing ARP table for IP conflicts..."

# Find duplicate MAC addresses (ignoring N/A)
conflicts=$(echo "$arp_output" | awk '{for(i=1;i<=NF;i++) if ($i=="lladdr") print $(i+1)}' | grep -v "^$" | sort | uniq -d)

if [ -z "$conflicts" ]; then
    echo "No IP conflicts detected."
else
    echo -e "\nIP conflicts detected:\n"
    for mac in $conflicts; do
        echo "MAC Address: $mac"
        echo "------------------------"
        # Show all IPs linked to this MAC
        echo "$arp_output" | grep "$mac" | while read -r entry; do
            ip_addr=$(echo "$entry" | awk '{print $1}')
            iface=$(echo "$entry" | awk '{print $3}')
            status=$(echo "$entry" | awk '{print $NF}')
            printf "  %-16s %-10s %-10s\n" "$ip_addr" "$iface" "$status"
        done
        echo
    done
fi

echo "Checking for IP conflict logs..."
logread 2>/dev/null | grep -i conflict || echo "No conflict logs found."
