#!/bin/bash

display_datto_netrunners() {
    cat << "EOF"

██╗██████╗ ██████╗ ███████╗ ██████╗ ██████╗ ███╗   ██╗
██║██╔══██╗██╔══██╗██╔════╝██╔════╝██╔═══██╗████╗  ██║
██║██████╔╝██████╔╝█████╗  ██║     ██║   ██║██╔██╗ ██║
██║██╔═══╝ ██╔══██╗██╔══╝  ██║     ██║   ██║██║╚██╗██║
██║██║     ██║  ██║███████╗╚██████╗╚██████╔╝██║ ╚████║
╚═╝╚═╝     ╚═╝  ╚═╝╚══════╝ ╚═════╝ ╚══════╝ ╚═╝  ╚═══╝

  By Noor Shaheed, Datto, Kaseya. 05/27/2024 IP Conflict Tool V.01
EOF
}

display_datto_netrunners

echo -e "\nFetching ARP table using 'ip neigh'...\n"

arp_output=$(ip neigh)

echo "ARP Table:"
echo "-------------------------------------------------------------"
printf "%-16s %-10s %-20s %-10s\n" "IP Address" "Interface" "MAC Address" "Status"
echo "-------------------------------------------------------------"

# Format and print arp_output nicely
while read -r line; do
    ip_addr=$(echo "$line" | awk '{print $1}')
    iface=$(echo "$line" | awk '{print $3}')
    mac=$(echo "$line" | awk '{for(i=1;i<=NF;i++) if ($i=="lladdr") print $(i+1)}')
    status=$(echo "$line" | awk '{print $NF}')
    [[ -z "$mac" ]] && mac="N/A"
    printf "%-16s %-10s %-20s %-10s\n" "$ip_addr" "$iface" "$mac" "$status"
done <<< "$arp_output"

echo -e "\nAnalyzing ARP table for IP conflicts (Private IPs only)..."

# Extract only private IP entries with MAC addresses
private_entries=$(echo "$arp_output" | grep -E '10\..*|172\.(1[6-9]|2[0-9]|3[0-1])\.|192\.168\.' | grep "lladdr")

# Find duplicate MACs from private IPs only
conflicts=$(echo "$private_entries" | awk '{for(i=1;i<=NF;i++) if ($i=="lladdr") print $(i+1)}' | sort | uniq -d)

if [ -z "$conflicts" ]; then
    echo "No IP conflicts detected."
else
    echo -e "\nIP conflicts detected (Private IPs only):\n"
    for mac in $conflicts; do
        echo "MAC Address: $mac"
        echo "------------------------"
        echo "$private_entries" | grep "$mac" | while read -r entry; do
            ip_addr=$(echo "$entry" | awk '{print $1}')
            iface=$(echo "$entry" | awk '{print $3}')
            status=$(echo "$entry" | awk '{print $NF}')
            printf "  %-16s %-10s %-10s\n" "$ip_addr" "$iface" "$status"
        done
        echo
    done
fi
